module.exports = {
  root: true,
  env: {
    node: true,
    es6: true,
  },
  parserOptions: { ecmaVersion: 8 },
  ignorePatterns: [
    'node_modules/*',
    '.next/*',
    '.out/*',
    '!.prettierrc.js',
    'build/*',
  ], // We don't want to lint generated files nor node_modules, but we want to lint .prettierrc.js (ignored by default by eslint)
  extends: ['eslint:recommended'],
  overrides: [
    {
      files: ['**/*.ts', '**/*.tsx'],
      parser: '@typescript-eslint/parser',
      settings: { react: { version: 'detect' } },
      env: {
        browser: true,
        node: true,
        es6: true,
      },
      extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:react/recommended',
        'plugin:react-hooks/recommended',
        'plugin:jsx-a11y/recommended',
      ],
      rules: {
        'max-classes-per-file': ['error', 2],
        'react/jsx-first-prop-new-line': [1, 'multiline'],
        'react-hooks/exhaustive-deps': 'off',
        'react/jsx-max-props-per-line': 'off',
        indent: [2, 2, { SwitchCase: 1 }],
        semi: [2, 'always'],
        'arrow-parens': 'off',
        'no-bitwise': ['error', { allow: ['>>', '<<'] }],
        'import/prefer-default-export': 'off',
        'react-hooks/rules-of-hooks': 'error',
        'react/jsx-no-target-blank': 'off',
        'react/static-property-placement': 'off',
        'space-before-function-paren': 'off',
        'global-require': 'off',
        'no-underscore-dangle': 'off',
        'comma-dangle': 'off',

        'prefer-destructuring': 'off',
        'react/jsx-one-expression-per-line': 'off',
        'react/jsx-filename-extension': 'off',
        'jsx-quotes': ['error', 'prefer-single'],
        'max-len': [
          'error',
          {
            code: 115,
            tabWidth: 2,
            ignoreComments: true,
            ignoreTemplateLiterals: true,
            ignoreUrls: true,
            ignoreStrings: true,
          },
        ],
        'react/forbid-prop-types': 'off',
        'array-callback-return': 'off',
        'consistent-return': 'off',
        'react/jsx-props-no-spreading': 'off',
        'no-restricted-globals': 'off',
        'import/no-cycle': 'off',
        'no-console': [
          'error',
          {
            allow: ['warn', 'error', 'info'],
          },
        ],
        'object-curly-spacing': ['error', 'always'],
        camelcase: 'off',
        'no-trailing-spaces': 'off',
        'react/prop-types': 'off',
        'react/react-in-jsx-scope': 'off',
        'jsx-a11y/anchor-is-valid': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-unused-vars': ['error'],
        '@typescript-eslint/explicit-function-return-type': [
          'warn',
          {
            allowExpressions: true,
            allowConciseArrowFunctionExpressionsStartingWithVoid: true,
          },
        ],
      },
    },
  ],
};
